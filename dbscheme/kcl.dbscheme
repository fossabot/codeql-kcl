/*
* External artifacts
*/

externalDefects(
  unique int id : @externalDefect,
  varchar(900) queryPath : string ref,
  int location : @location ref,
  varchar(900) message : string ref,
  float severity : float ref
);

externalMetrics(
  unique int id : @externalMetric,
  varchar(900) queryPath : string ref,
  int location : @location ref,
  float value : float ref
);

externalData(
  int id : @externalDataElement,
  varchar(900) queryPath : string ref,
  int column: int ref,
  varchar(900) data : string ref
);

snapshotDate(unique date snapshotDate : date ref);

sourceLocationPrefix(varchar(900) prefix : string ref);

/*
 * Duplicate code
 */

duplicateCode(
  unique int id : @duplication,
  varchar(900) relativePath : string ref,
  int equivClass : int ref);

similarCode(
  unique int id : @similarity,
  varchar(900) relativePath : string ref,
  int equivClass : int ref);

@duplication_or_similarity = @duplication | @similarity

tokens(
  int id : @duplication_or_similarity ref,
  int offset : int ref,
  int beginLine : int ref,
  int beginColumn : int ref,
  int endLine : int ref,
  int endColumn : int ref);
  
/****************************
        KCL dbscheme
****************************/

/** Locations */

files(unique int id: @file, string name: string ref);
  
folders(unique int id: @folder, string name: string ref);

@container = @folder | @file;

containerparent(int parent: @container ref,
  unique int child: @container ref);

@sourceline = @file | @Module | @xmllocatable;

numlines(int element_id: @sourceline ref,
  int num_lines: int ref,
  int num_code: int ref,
  int num_comment: int ref
);

@location = @location_default;

locations_default(unique int id: @location_default,
  int file: @file ref,
  int beginLine: int ref,
  int beginColumn: int ref,
  int endLine: int ref,
  int endColumn: int ref);

file_contents(unique int file: @file ref, string contents: string ref);

module_path(int module: @Module ref, int file: @file ref);

variable(unique int id : @variable,
  int scope : @py_scope ref,
  varchar(1) name : string ref);

line_lengths(unique int id : @line,
  int file: @Module ref,
  int line : int ref,
  int length : int ref);

/** Grammar */

modules(unique int id : @Module);

schemas(unique int id : @Schema,
  unique int parent : @SchemaExpr ref);

functions(unique int id : @Lambda,
  unique int parent : @function_parent ref);

imports(unique int id : @import,
  int parent : @import_list ref,
  int idx : int ref);

import_lists(unique int id : @import_list,
  unique int parent : @Import ref);

arguments(unique int id : @arguments,
  unique int parent : @arguments_parent ref);

parameter_lists(unique int id : @parameter_list,
  unique int parent : @parameter_list_parent ref);

exprs(unique int id : @expr,
  int kind: int ref,
  int parent : @expr_parent ref,
  int idx : int ref);

expr_contexts(unique int id : @expr_context,
  int kind: int ref,
  unique int parent : @expr_context_parent ref);

expr_lists(unique int id : @expr_list,
  int parent : @expr_list_parent ref,
  int idx : int ref);

stmts(unique int id : @stmt,
  int kind: int ref,
  int parent : @stmt_list ref,
  int idx : int ref);

stmt_lists(unique int id : @stmt_list,
  int parent : @stmt_list_parent ref,
  int idx : int ref);

numbers(varchar(1) id : string ref,
  int parent : @NumberLit ref,
  int idx : int ref);

strs(varchar(1) id : string ref,
  int parent : @StringLit ref,
  int idx : int ref);

binaryops(unique int id : @binaryop,
  int kind: int ref,
  unique int parent : @Binary ref);

unaryops(unique int id : @unaryop,
  int kind: int ref,
  unique int parent : @Unary ref);

cmpops(unique int id : @cmpop,
  int kind: int ref,
  int parent : @cmpop_list ref,
  int idx : int ref);

cmpop_lists(unique int id : @cmpop_list,
    unique int parent : @Compare ref);

comprehensions(unique int id : @comprehension,
  int parent : @comprehension_list ref,
  int idx : int ref);
  
comprehension_lists(unique int id : @comprehension_list,
  unique int parent : @ListComp ref);

config_items(unique int id : @config_item,
  int kind: int ref,
  int parent : @config_item_list ref,
  int idx : int ref);

config_item_lists(unique int id : @config_item_list,
  unique int parent : @config_item_list_parent ref);

variable(unique int id : @variable,
  int scope : @scope ref,
  varchar(1) name : string ref);

variables(int id : @variable ref,
  unique int parent : @Identifier ref);

/** Statements */

case @stmt.kind of
  0 = @TypeAlias
| 1 = @Expr
| 2 = @Unification
| 3 = @Assign
| 4 = @AugAssign
| 5 = @Assert
| 6 = @If
| 7 = @Import
| 8 = @Schemaattr
| 9 = @Schema
| 10 = @Rule;

/** Expressions */

case @expr.kind of
    0 = @missingexpr
| 1 = @Identifier
| 2 = @Unary
| 3 = @Binary
| 4 = @If
| 5 = @Selector
| 6 = @Call
| 7 = @Paren
| 8 = @Quant
| 9 = @List
| 10 = @ListIfItem
| 11 = @ListComp
| 12 = @Starred
| 13 = @DictComp
| 14 = @Compclause
| 15 = @Schema
| 16 = @Config
| 17 = @Check
| 18 = @Lambda
| 19 = @Subscript
| 20 = @Keyword
| 21 = @Arguments
| 22 = @Compare
| 23 = @NumberLit
| 24 = @StringLit
| 25 = @NameConstantLit
| 26 = @JoinedString
| 27 = @FormmattedValue
| 28 = @ConfigIfEntry
| 29 = @Missing;

case @numberbinarysuffix.kind
| 0 = @n
| 1 = @u
| 2 = @m
| 3 = @k
| 4 = @K
| 5 = @M
| 6 = @G
| 7 = @T
| 8 = @P
| 9 = @Ki
| 10 = @Mi
| 11 = @Gi
| 12 = @Ti
| 13 = @Pi;

case @nameconstant.kind
  0 = @True
| 1 = @False
| 2 = @None
| 3 = @Undefined;

case @exprcontext.kind
  0 = @Load
| 1 = @Store;

case @quantoperation.kind
  0 = @All
| 1 = @Any
| 2 = @Filter
| 3 = @Map;

case @configentryoperation.kind
  0 = @Union
| 1 = @Override
| 2 = @Insert;

case @literal.kind of
  0 = @Number
| 1 = @String
| 2 = @NameConstant;

case @numberlitvalue.kind of
  0 = @Int
| 1 = @Float;

case @binop.kind of
  0 = @Add
| 1 = @Sub
| 2 = @Mul
| 3 = @Div
| 4 = @Mod
| 5 = @Pow
| 6 = @FloorDiv
| 7 = @LShift
| 8 = @RShift
| 9 = @BitXor
| 10 = @BitAnd
| 11 = @BitOr
| 12 = @And
| 13 = @Or
| 14 = @As;

case @augop.kind of
  0 = @Assign
| 1 = @Add
| 2 = @Sub
| 3 = @Mul
| 4 = @Div
| 5 = @Mod
| 6 = @Pow
| 7 = @FloorDiv
| 8 = @LShift
| 9 = @RShift
| 10 = @BitXor
| 11 = @BitAnd
| 12 = @BitOr;

case @unaryop.kind of
  0 = @UAdd
| 1 = @USub
| 2 = @Invert
| 3 = @Not;

case @cmpop.kind of
  0 = @Eq
| 0 = @NotEq
| 0 = @Lt
| 0 = @LtE
| 0 = @Gt
| 0 = @GtE
| 0 = @Is
| 0 = @In
| 0 = @NotIn
| 0 = @Not
| 0 = @IsNot;

/** Comments */


/** Types */
case @type.kind of
  0 = @Any
| 1 = @Named
| 2 = @Bool
| 3 = @Int
| 4 = @Float
| 5 = @Str
| 6 = @List
| 7 = @Dict
| 8 = @Union
| 9 = @BoolLit
| 10 = @IntLit
| 11 = @FloatLit
| 12 = @StringLit
| 13 = @Function;

@basictype = @Bool | @Int | @Float | @Str;

@literaltype = @boolliteraltype | @intliteraltype | @floatliteraltype | @strliteraltype;

@stmt_list_parent = @Schema | @Rule | @SchemaAttr | @Import | @If | @Assert | @AugAssign | @Assign | @Unification;

@expr_context_parent = @Identifier | @List | @Quant | @Selector | @Starred | @Subscript;

@literal = @NumberLit | @StringLit | @NameConstantLit;

@string_part_parent = @JoinedString | @FormmattedValue;

@function_parent = @DictComp | @ListComp | @Lambda;

@arguments_parent = @SchemaExpr | @Lambda;

@comprehension = @ListComp | @DictComp;

@parameter_list_parent = @Schema | @Lambda;

@config_item_list_parent = @KeyValuePair | @ConfigIfEntry | @Starred;

@expr_or_stmt = @expr | @stmt;

/** Scopes */
case @scope.kind of
  0 = @Package
| 1 = @Builtin
| 2 = @Schema
| 3 = @Loop
| 4 = @CondStmt
| 5 = @LambdaScope
| 6 = @ConfigScope;

/** Errors */

case @error.kind of
  0 = @unknownerror
| 1 = @parseerror
| 2 = @typeerror
| 3 = @evaluationerror;
/** Tokens */

/* XML Files */
xmlEncoding  (unique int id: @file ref, varchar(900) encoding: string ref);

xmlDTDs       (unique int id: @xmldtd,
              varchar(900) root: string ref,
              varchar(900) publicId: string ref,
              varchar(900) systemId: string ref,
              int fileid: @file ref);

xmlElements   (unique int id: @xmlelement,
              varchar(900) name: string ref,
              int parentid: @xmlparent ref,
              int idx: int ref,
              int fileid: @file ref);

xmlAttrs      (unique int id: @xmlattribute,
              int elementid: @xmlelement ref,
              varchar(900) name: string ref,
              varchar(3600) value: string ref,
              int idx: int ref,
              int fileid: @file ref);

xmlNs         (int id: @xmlnamespace,
              varchar(900) prefixName: string ref,
              varchar(900) URI: string ref,
              int fileid: @file ref);

xmlHasNs      (int elementId: @xmlnamespaceable ref,
              int nsId: @xmlnamespace ref,
              int fileid: @file ref);

xmlComments   (unique int id: @xmlcomment,
              varchar(3600) text: string ref,
              int parentid: @xmlparent ref,
              int fileid: @file ref);

xmlChars      (unique int id: @xmlcharacters,
              varchar(3600) text: string ref,
              int parentid: @xmlparent ref,
              int idx: int ref,
              int isCDATA: int ref,
              int fileid: @file ref);

@xmlparent = @file | @xmlelement;
@xmlnamespaceable = @xmlelement | @xmlattribute;

xmllocations(int xmlElement: @xmllocatable ref,
             int location: @location_default ref);

@xmllocatable = @xmlcharacters | @xmlelement | @xmlcomment | @xmlattribute | @xmldtd | @file | @xmlnamespace;
